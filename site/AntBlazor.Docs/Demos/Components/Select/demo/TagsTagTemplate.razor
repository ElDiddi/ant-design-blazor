@using AntDesign.Select
<Select Mode="tags"
        DataSource="@_myColors"
        @bind-Values="@_selectedColorValues"
        LabelName="@nameof(MyColor.Name)"
        ValueName="@nameof(MyColor.Id)"
        Placeholder="Select a color"
        DefaultActiveFirstItem="false"
        AllowClear
        EnableSearch="@_toggleSearch">
    <ItemTemplate>
        <span style="Color: @((context as MyColor).Name);">@((context as MyColor).Name)</span>
    </ItemTemplate>
    <LabelTemplate>
        <LabelTemplateItem Context="item"
                           TItem="MyColor"
                           TItemValue="int"
                           Class="@("ant-tag ant-tag-" + (context as MyColor).Name)"
                           Style="margin-right: 4px;"
                           RemoveIconStyle="margin-top: 1px; display: inline-block;">
            <LabelTemplateItemContent>
                <span style="color: @((item as MyColor).Name);">@((item as MyColor).Name)</span>
            </LabelTemplateItemContent>
        </LabelTemplateItem>
    </LabelTemplate>
</Select>
<br />
<Button @onclick="@ToggleSearch"> Toggle Search (@_toggleSearch)</Button>

@code
{
    class MyColor
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    List<MyColor> _myColors;
    IEnumerable<int> _selectedColorValues;
    bool _toggleSearch;

    protected override void OnInitialized()
    {
        _myColors = new List<MyColor>
        {
            new MyColor {Id = 1, Name = "gold"}, 
            new MyColor {Id = 2, Name = "lime"}, 
            new MyColor {Id = 3, Name = "green"}, 
            new MyColor {Id = 4, Name = "cyan"}
        };

        _selectedColorValues = new List<int> { 2 };
    }

    private void ToggleSearch()
    {
        _toggleSearch = !_toggleSearch;
    }
}
